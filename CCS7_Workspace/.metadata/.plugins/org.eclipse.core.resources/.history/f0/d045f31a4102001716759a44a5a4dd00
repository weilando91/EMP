/*****************************************************************************
* University of Southern Denmark
* Embedded Programming (EMP)
*
* MODULENAME.: emp.c
*
* PROJECT....: EMP
*
* DESCRIPTION: See module specification file (.h-file).
*
* Change Log:
*****************************************************************************
* Date    Id    Change
* YYMMDD
* --------------------
* 050128  KA    Module created.
*
*****************************************************************************/


/***************************** Include files *******************************/
#include<stdint.h>
#include"tm4c123gh6pm.h"
#include"emp_type.h"
#include"gpio.h"
#include"systick.h"


/*****************************    Defines    *******************************/

/*****************************   Constants   *******************************/

/*****************************   Variables   *******************************/
INT8U           counter_value = 0;
INT8U           direction = 1;


int main(void) {
/*****************************************************************************
*   Input    :
*   Output   :
*   Function :
******************************************************************************/



    // Setup systick timer
    disable_global_int();
    init_gpio();
    init_systick();
    enable_global_int();


    GPIO_PORTF_DATA_R = 0x00;

    // Loop forever.
    while(1)
    {

        if( GPIO_PORTF_DATA_R & 0x10 )         //if PF4 er high
        {
//            GPIO_PORTF_DATA_R &= ~(0x02);
//            counter_value = 0x00;
        }
        else
        {
  //          GPIO_PORTF_DATA_R |= 0x02;

            if(direction = 1)
            {
                if( counter_value >= 7)
                {
                    counter_value = 0;
                }
                else
                {
                    counter_value++;
                }
            }
            else
            {
                if(counter_value <=0)
                {
                    counter_value = 7;
                }
                else
                {
                    counter_value--;
                }
            }

        }




        if(counter_value & 0x01)
                    GPIO_PORTF_DATA_R |= 0x08;          //bit 0
                else
                    GPIO_PORTF_DATA_R &= ~(0x08);

        if(counter_value & 0x02)
                    GPIO_PORTF_DATA_R |= 0x04;          //bit 1
                else
                    GPIO_PORTF_DATA_R &= ~(0x04);

        if(counter_value & 0x04)
                    GPIO_PORTF_DATA_R |= 0x02;          //bit 2
                else
                    GPIO_PORTF_DATA_R &= ~(0x02);


        while( !ticks );
        {

            ticks--;

        }

        while( !(GPIO_PORTF_DATA_R & 0x10))
        {
            //do nothing
        }

    }
    return 0;
}
//0 0x00 off
//1 0x08 green
//2 0x04 blue
//3 0x0C Cyan
//4 0x02 Red
//5 0x0A Yellow
//6 0x06 Magenta
//7 0x0E White


